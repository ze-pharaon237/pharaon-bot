// Temporarily Disabled.
import Strings from "../lib/db";
import format from "string-format";
import inputSanitization from "../sidekick/input-sanitization";
import { MessageType } from "../sidekick/message-type";
import Client from "../sidekick/client";
import { proto } from "@adiwajshing/baileys";
import BotsApp from "../sidekick/sidekick";
import fs from "fs";
import { promisify } from 'util';
import config from "../config";

const CPP = Strings.cpp;
const exec = promisify(require("child_process").exec);
var execFile = require('child_process').execFile

module.exports = {
    name: "cpp",
    description: CPP.DESCRIPTION,
    extendedDescription: CPP.EXTENDED_DESCRIPTION,
    demo: { isEnabled: true, text: ['.cpp printf("Hello from BotsApp!");', '.cpp float x, y;\ncin >> x >> y;\ncout<<"sum of provide numbers is -> " << x + y; -i 6 0.9', '.cpp #include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n  cout << "BotsApp is the best!" << endl;\n}'] },
    async handle(client: Client, chat: proto.IWebMessageInfo, BotsApp: BotsApp, args: string[]): Promise<void> {
        try {
            if (args[0] == null) {
                await client.sendMessage(
                    BotsApp.chatId,
                    CPP.NO_INPUT,
                    MessageType.text
                ).catch(err => inputSanitization.handleError(err, client, BotsApp));
                return;
            }
            var processing = await client.sendMessage(
                BotsApp.chatId,
                CPP.PROCESSING,
                MessageType.text
            )
            var body = BotsApp.body.replace(
                BotsApp.body[0] + BotsApp.commandName + " ",
                ""
            );
            let input;
            try{
                var text = body.split("-i")
                var code = text[0]
                input = text[1].substring(1)

            }catch(err){
                var code = body;
            }
            var cpp = ""
            if (!(/main\(/g.test(code))) {
                cpp = CPP.BOILERPLATE.replace("{code}", code);
            } else {
                cpp = code;
            }
            let filename = './tmp/cpp-botsapp' + chat.key.id +'.cpp';
            let outname = './tmp/cpp-botsapp' + chat.key.id +'.out';
            fs.writeFileSync(filename, cpp);
            var out = {
                stderr: 'N/A',
                stdout: 'N/A',
                code: cpp
            }
            var compile = `g++ ${filename} -o ${outname}`
            var execute = `env -i ${outname}`
            try {
                await exec(compile)
                var child = execFile(`env -i ${outname}`, [], {shell: true},
                    async function (error, stdout, stderr) {
                        if(stdout){
                            out.stdout = stdout
                        }
                        if(stderr){
                            out.stderr = stderr
                        }else if(error){
                            if(error.code == null){
                                out.stderr = "Execution timed out (10 seconds). Please make sure that the input has been provided and is in correct order. Use the``` *.help cpp* ```command for more info!"
                            }else{
                                out.stderr = error
                            }
                            out.stdout = "N/A"
                        }
                        await client.sendMessage(
                            BotsApp.chatId,
                            format(CPP.OUTPUT_TEMPLATE, out),
                            MessageType.text
                        )
                        await client.deleteMessage(BotsApp.chatId, {
                            id: processing.key.id,
                            remoteJid: BotsApp.chatId,
                            fromMe: true,
                        })
                    }
                );
                if(input){
                    child.stdin.setEncoding('utf-8');
                    child.stdin.write(input + "\n");
                    out.code += "\n\nWith Input - " + input
                }
            } catch (err) {
                out.stderr = err.stderr
                await client.sendMessage(
                    BotsApp.chatId,
                    format(CPP.OUTPUT_TEMPLATE, out),
                    MessageType.text
                )
                return await client.deleteMessage(BotsApp.chatId, {
                    id: processing.key.id,
                    remoteJid: BotsApp.chatId,
                    fromMe: true,
                })
            }
            setTimeout(() => {
                try{
                    child.kill(); // Does not terminate the Node.js process in the shell.
                    inputSanitization.deleteFiles(
                        filename,
                        outname
                    );
                }catch(err){
                    // Do nothing lmao
                }
            }, 10000);
        } catch (err) {
            await inputSanitization.handleError(err, client, BotsApp);
        }
    }
};
